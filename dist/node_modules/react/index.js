(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	/** 判断当前的宿主环境是否支持symbol */
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/** ReactElement需要是唯一的值，防止滥用 */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        /** 自定义标记，原生react是没有这个的 */
	        __mark: 'Voiceu'
	    };
	    return element;
	};
	const jsxDEV = (type, config) => {
	    let key = null; // 没传入key，则默认为null
	    let ref = null;
	    const props = {};
	    // 将config上的配置，复制给props
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val; // 转为string
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = '' + val; // 转为string
	            }
	            continue;
	        }
	        // config其他的prop，需要判断是否是自己的属性，而不是原型上的属性
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: '0.0.0',
	    createElement: jsxDEV
	};

	return index;

}));
